# Generated by Django 5.1.7 on 2025-07-30 00:35

import uuid

import django.core.validators
from django.db import migrations, models

import apps.events.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Event",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("public_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("image", models.ImageField(blank=True, null=True, upload_to="events/images/")),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("location", models.CharField(max_length=255, null=True)),
                (
                    "geo_location",
                    models.JSONField(blank=True, null=True, validators=[apps.events.validators.geo_location_validator]),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("drf", "Draft"),
                            ("psd", "Paused"),
                            ("cnl", "Canceled"),
                            ("sch", "Scheduled"),
                            ("cpl", "Completed"),
                        ],
                        default="drf",
                        max_length=20,
                    ),
                ),
                ("registration_opening", models.DateTimeField(null=True)),
                ("registration_deadline", models.DateTimeField(null=True)),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="EventCategory",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("public_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("title", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Event Category",
                "verbose_name_plural": "Event Categories",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Speaker",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("public_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("name", models.CharField(max_length=255)),
                ("image", models.ImageField(blank=True, null=True, upload_to="speakers/images/")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("public_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("p", "pending"), ("s", "success"), ("c", "cancelled"), ("e", "expired")],
                        default="p",
                        max_length=20,
                    ),
                ),
                ("ticket_number", models.PositiveSmallIntegerField(editable=False)),
                ("final_amount", models.PositiveIntegerField()),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("presence", models.BooleanField(default=False)),
                ("presence_key", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
            options={
                "verbose_name": "Ticket",
                "verbose_name_plural": "Tickets",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TicketType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("public_id", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("title", models.CharField(max_length=256)),
                ("description", models.TextField(blank=True)),
                (
                    "max_participants",
                    models.PositiveIntegerField(
                        blank=True, null=True, validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("price", models.PositiveIntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
