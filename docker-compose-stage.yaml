services:
  backend:
    image: mirsobhan/neshast-backend:latest
    command: sh -c "make collectstatic && make run address=0.0.0.0:8000"
    volumes:
      - logs:/app/logs
    env_file:
      - .env.stage
    ports:
      - "8000:8000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health/" ]
      interval: 30s
      retries: 3
      start_period: 5s
      timeout: 5s
    depends_on:
      postgresql:
        condition: service_started
      redis:
        condition: service_started
      mailserver:
        condition: service_started
      minio:
        condition: service_healthy
      mc:
        condition: service_completed_successfully
    networks:
      - main_net

  postgresql:
    image: postgres:17
    ports:
      - 5432:5432
    env_file:
      - .env.stage
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}

  worker:
    image: mirsobhan/neshast-backend:latest
    command: uv run celery -A config worker -l INFO
    env_file:
      - .env.stage
    depends_on:
      redis:
        condition: service_started
      mailserver:
        condition: service_started
    networks:
      - main_net

  beat:
    image: mirsobhan/neshast-backend:latest
    command: uv run celery -A config beat -l INFO
    env_file:
      - .env.stage
    depends_on:
      redis:
        condition: service_started
      mailserver:
        condition: service_started
    networks:
      - main_net

  redis:
    image: redis:7.4.2-alpine
    ports:
      - "6379:6379"
    networks:
      - main_net

  mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mailserver
    hostname: mail.example.com
    env_file: mailserver.env
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS, Authentication is DISABLED => use port 465/587 instead)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - ./docker-data/dms/mail-data/:/var/mail/
      - ./docker-data/dms/mail-state/:/var/mail-state/
      - ./docker-data/dms/mail-logs/:/var/log/mail/
      - ./docker-data/dms/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
    restart: always
    stop_grace_period: 1m
    # Uncomment if using `ENABLE_FAIL2BAN=1`:
    # cap_add:
    #   - NET_ADMIN
    healthcheck:
      test: "ss --listening --ipv4 --tcp | grep --silent ':smtp' || exit 1"
      timeout: 3s
      retries: 0
    networks:
      - main_net

  minio:
    image: minio/minio:RELEASE.2025-07-18T21-56-31Z-cpuv1
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - .env.stage
    environment:
      MINIO_ROOT_USER: ${MINIO_STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_STORAGE_SECRET_KEY}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s
    command: server /data --console-address ":9001"
    networks:
      - main_net

  mc:
    image: minio/mc:RELEASE.2025-07-21T05-28-08Z-cpuv1
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set myminio http://minio:9000 minio minio123) do echo 'waiting for minio'; sleep 3; done;
      /usr/bin/mc mb --ignore-existing myminio/static myminio/media;
      "
    networks:
      - main_net

volumes:
  logs:

networks:
  main_net:
    external:
      true
